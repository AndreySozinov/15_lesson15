# üìå –î–æ—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É 4.
# üìå –î–æ–±–∞–≤—å—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–ø—É—Å–∫–∞ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏.
# üìå –ü—Ä–∏ —ç—Ç–æ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ª—é–±–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –º–æ–∂–Ω–æ –æ–ø—É—Å—Ç–∏—Ç—å. –í
# —ç—Ç–æ–º —Å–ª—É—á–∞–µ –±–µ—Ä—ë—Ç—Å—è –ø–µ—Ä–≤—ã–π –≤ –º–µ—Å—è—Ü–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏, —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏/–∏–ª–∏ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü.
# üìå *–ù–∞—É—á–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å –Ω–µ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ
# –Ω–∞–∑–≤–∞–Ω–∏—è –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –∏ –º–µ—Å—è—Ü–∞, –Ω–æ –∏ —á–∏—Å–ª–æ–≤—ã–µ, —Ç.–µ –Ω–µ –º–∞—è, –∞ 5.
from datetime import datetime
import logging
import argparse

logging.basicConfig(filename=f'date.log',
                    encoding='utf-8',
                    level=logging.ERROR)
logger = logging.getLogger(__name__)
days_of_week = ['–ø–æ–Ω', '–≤—Ç–æ', '—Å—Ä–µ', '—á–µ—Ç', '–ø—è—Ç', '—Å—É–±', '–≤–æ—Å']
months = ['', '—è–Ω–≤', '—Ñ–µ–≤', '–º–∞—Ä', '–∞–ø—Ä', '–º–∞—è', '–∏—é–Ω',
              '–∏—é–ª', '–∞–≤–≥', '—Å–µ–Ω', '–æ–∫—Ç', '–Ω–æ—è', '–¥–µ–∫']


def string_to_date(string_entry: str):
    try:
        week, day, month = string_entry.lower().split()
    except ValueError as e:
        logger.info(e)
        return None

    week_num = int(week[0])
    weekday = days_of_week.index(day[:3])
    month = months.index(month[:3])
    year = datetime.now().year

    count = 0
    for i in range(1, 32):
        date_ = datetime(day=i, month=month, year=year)
        if date_.weekday() == weekday:
            count += 1
            if count == week_num:
                return date_.date()


def parse_args():
    parser = argparse.ArgumentParser(description='–ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã')
    parser.add_argument('-w', '--week', default=1)
    parser.add_argument('-d', '--weekday', default=datetime.now().weekday())
    parser.add_argument('-m', '--month', default=datetime.now().month)

    arguments = parser.parse_args()
    month = months[arguments.m] if isinstance(arguments.m, int) else arguments.m
    weekday = days_of_week[arguments.d] if isinstance(arguments.d, int) else arguments.d
    week_num = str(arguments.w) if isinstance(arguments.w, int) else arguments.w
    return string_to_date(f'{week_num} {weekday} {month}')


if __name__ == '__main__':
    # print(string_to_date('1-–π —á–µ—Ç–≤–µ—Ä–≥ –Ω–æ—è–±—Ä—è'))
    # print(string_to_date('3-—è —Å—Ä–µ–¥–∞ –º–∞—è'))
    # print(string_to_date('5-–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –∞–ø—Ä–µ–ª—è'))
    print(parse_args())
