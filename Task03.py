# üìå –î–æ—Ä–∞–±–æ—Ç–∞–µ–º –∑–∞–¥–∞—á—É 2.
# üìå –°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ –≤ –ª–æ–≥ —Ñ–∞–π–ª —Ä–∞–∑–¥–µ–ª—å–Ω–æ:
# ‚óã —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è,
# ‚óã –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è,
# ‚óã –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏ (–Ω–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞),
# ‚óã –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤—ã–∑–æ–≤–∞,
# ‚óã —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
from typing import Callable
import logging

logging.basicConfig(filename=f'my_func.log',
                    encoding='utf-8', format='{levelname} - {asctime}: {msg}',
                    style='{', level=logging.INFO)
logger = logging.getLogger(__name__)


def deco(func: Callable):
    def wrapper(*args, **kwargs):
        result = func(*args, **kwargs)
        my_dict = {'args': args, **kwargs}

        message = f'{func.__name__} {my_dict} {result}'

        logger.info(message)
        return result

    return wrapper


@deco
def my_func(*args, **kwargs) -> str:
    return f'–§—É–Ω–∫—Ü–∏—è –æ—Ç—Ä–∞–±–æ—Ç–∞–ª–∞.'


if __name__ == '__main__':
    my_func(52, 2, 11, 6, tora=5, bible=14)
